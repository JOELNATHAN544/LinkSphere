name: PR Description Auto-Close

on:
  pull_request_target:
    types: [opened, edited, labeled, unlabeled, synchronize]
    branches: [dev, master]
  schedule:
    - cron: '0 0 * * *' # every 24 hours
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write

jobs:
  close-invalid-description-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Close PRs with invalid descriptions
        uses: actions/github-script@v7
        with:
          script: |
            async function closeIfInvalid(pr) {
              if (!pr) return;
              if (!['dev', 'master'].includes(pr.base.ref)) return;
              const labels = pr.labels.map(l => l.name);
              if (labels.includes('invalid-description')) {
                const attemptLabel = labels.find(l => l.startsWith('description-attempt-'));
                const attempts = attemptLabel ? parseInt(attemptLabel.replace('description-attempt-', '')) : 0;
                const now = new Date();
                const updated = new Date(pr.updated_at);
                const minutesSinceUpdate = (now - updated) / 60000;
                if (attempts >= 5 || minutesSinceUpdate > 30) {
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    state: 'closed'
                  });
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: `ðŸš« This PR was closed because the description was not updated after ${attempts} attempts or within 30 minutes. Please open a new PR with a valid description.`
                  });
                }
              }
            }

            if (context.payload.pull_request) {
              await closeIfInvalid(context.payload.pull_request);
            } else {
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              for (const pr of prs.data) {
                await closeIfInvalid(pr);
              }
            } 